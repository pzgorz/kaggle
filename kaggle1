sf_population, sf_area = 864816, 231.89
rio_population, rio_area = 6453682, 486.5

san_francisco_pop_density = sf_population/sf_area
rio_de_janeiro_pop_density = rio_population/rio_area

if (san_francisco_pop_density > rio_de_janeiro_pop_density):
    print(True)
else:
    print(False)
 
################################################################################

this_string = 'Simon\'s skateboard is in the garage.'
print(this_string)

################################################################################

first_word = 'Hello'
second_word = 'There'
print(first_word + second_word)

print(first_word + ' ' + second_word)

print(first_word * 5)

print(len(first_word))

################################################################################

# TODO: Fix this string!
ford_quote = 'Whether you think you can, or you think you can\'t--you\'re right.'

# TODO: Fix this string!
ford_quote = "Whether you think you can, or you think you can't--you're right."

################################################################################

print (username + " accessed the site " + url + " at " + timestamp + ".")

################################################################################

name_length = len(given_name) + len(middle_names) + len(family_name) + 2

################################################################################

mon_sales = "121"
tues_sales = "105"
wed_sales = "110"
thurs_sales = "98"
fri_sales = "95"

mon_sales = int(mon_sales)
tues_sales = int(tues_sales)
wed_sales = int(wed_sales)
thurs_sales = int(thurs_sales)
fri_sales = int(fri_sales)

sum = mon_sales + tues_sales + wed_sales + thurs_sales + fri_sales
score = f"This week's total sales: {sum}"

print(score)


#TODO: Print a string with this format: This week's total sales: xxx
# You will probably need to write some lines of code before the print statement.

#OR ***************************************************************************

weekly_sales = int(mon_sales) + int(tues_sales) + int(wed_sales) + int(thurs_sales) + int(fri_sales)
weekly_sales = str(weekly_sales)  #convert the type back!!
print("This week's total sales: " + weekly_sales)

################################################################################

wacek = "dick"
ciusia = "cunt"

print("Does your {} and {} smells?".format(wacek, ciusia))

################################################################################

new_str = "The cow jumped over the moon."
print(new_str.split())

################################################################################

verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, don’t deal in lies,\nOr being hated, don’t give way to hating,\n  And yet don’t look too good, nor talk too wise:"

# Use the appropriate functions and methods to answer the questions above
# Bonus: practice using .format() to output your answers in descriptive messages!

# What is the length of the string variable verse?
# What is the index of the first occurrence of the word 'and' in verse?
# What is the index of the last occurrence of the word 'you' in verse?
# What is the count of occurrences of the word 'you' in the verse?

print("The length of the string is: {}".format(len(verse)))
print("The index of the first occurence of the word 'and' is: {}".format(verse.find("and")))
print("The index of the last occurence of the word 'you' is: {}".format(verse.rfind("you")))
print("The count of occurences of the word 'you' is: {}".format(verse.count("you")))

#OR *****************************************************************************

verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, don’t deal in lies,\nOr being hated, don’t give way to hating,\n  And yet don’t look too good, nor talk too wise:"
print(verse, "\n")

message = "Verse has a length of {} characters.\nThe first occurence of the \
word 'and' occurs at the {}th index.\nThe last occurence of the word 'you' \
occurs at the {}th index.\nThe word 'you' occurs {} times in the verse."

length = len(verse)
first_idx = verse.find('and')
last_idx = verse.rfind('you')
count = verse.count('you')

print(message.format(length, first_idx, last_idx, count))

################################################################################

months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

q3 = months[6:9]
print(q3) # [ 'July', 'August', 'September']

first_half = months[:6]
print(first_half) # ['January', 'February', 'March', 'April', 'May', 'June']

second_half = months[6:]
print(second_half) # ['July', 'August', 'September', 'October', 'November', 'December']

print(len(months)) # 12

greeting = "Hello there"
print(len(greeting)) # 11

################################################################################

list_of_random_things = [1, 3.4, 'a string', True]
list_of_random_things[len(list_of_random_things) - 1]
list_of_random_things[-1]
list_of_random_things[-2] 

#OR ****************************************************************************

list_of_random_things = [1, 3.4, 'a string', True]
print(list_of_random_things[len(list_of_random_things) - 1])
print(list_of_random_things[-1])
print(list_of_random_things[-2]) 

################################################################################

list_of_random_things = [1, 3.4, 'a string', True]
print(list_of_random_things[1:2])
print(list_of_random_things[:2])
print(list_of_random_things[1:])

################################################################################

my_lst = [1, 2, 3, 4, 5]
my_lst[0] = 'one'
print(my_lst)

################################################################################

# Use list indexing to determine how many days are in a particular month based on the integer
# variable month, and store that value in the integer variable num_days. 
# For example, if month is 8, num_days should be set to 31, since the eighth month, 
# August, has 31 days.

# Remember to account for zero-based indexing!
month = 2
days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]

# use list indexing to determine the number of days in month
num_days = days_in_month[month - 1]

print(num_days)

################################################################################

# Select the three most recent dates from this list using list slicing notation. 
# Hint: negative indexes work in slices!

eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',
                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',
                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',
                 'March 9, 2016']
                 
                 
# TODO: Modify this line so it prints the last three elements of the list
print(eclipse_dates[-3:])

################################################################################

letters = ['a', 'b', 'c', 'd']
letters.append('z')
print(letters)

################################################################################

a = [1, 5, 8]
b = [2, 6, 9, 10]
c = [100, 200]

print(max([len(a), len(b), len(c)]))
print(min([len(a), len(b), len(c)]))

################################################################################

names = ["Carol", "Albert", "Ben", "Donna"]
print(" & ".join(sorted(names)))

################################################################################

names = ["Carol", "Albert", "Ben", "Donna"]
names.append("Eugenia")
print(sorted(names))

################################################################################
length, width, height = (52, 40, 100)
print("The dimensions are {}x{}x{}".format(length, width, height))

#OR ****************************************************************************
#tupla bez nawiasów
length, width, height = 52, 40, 100
print("The dimensions are {}x{}x{}".format(length, width, height))

################################################################################

AngkorWat = (13.4125, 103.866667)

print(type(AngkorWat))

print("AngkorWat is at latitude: {}".format(AngkorWat[0]))
print("AngkorWat is at longitude: {}".format(AngkorWat[1]))

################################################################################

numbers = [1, 2, 6, 3, 1, 1, 6]
uniqe_nums = set(numbers)
print(uniqe_nums)

################################################################################

fruit = {"apple", "banana", "orange", "grapefruit"}

print("watermelon" in fruit)

fruit.add("watermelon")
print(fruit)

print(fruit.pop())
print(fruit)

################################################################################

elements = {"hydrogen": 1, "helium": 2, "carbon": 6}
print(elements["helium"])
elements["lithium"] = 3
print("carbon" in elements)
print(elements.get("dilithium"))

################################################################################

# Define a Dictionary, population,
# that provides information
# on the world's largest cities.
# The key is the name of a city
# (a string), and the associated
# value is its population in
# millions of people.

#   Key     |   Value
# Shanghai  |   17.8
# Istanbul  |   13.3
# Karachi   |   13.0
# Mumbai    |   12.5

population = {"Shanghai": 17.8, 
              "Istanbul": 13.3, 
              "Karachi": 13.0, 
              "Mumbai": 12.5}
print(population.get("Mumbai"))

################################################################################

animals = {
           'dogs': [20, 10, 15, 8, 32, 15],
           'cats': [3, 4, 2, 8, 2, 4],
           'rabbits': [2, 3, 3],
           'fish': [0.3, 0.5, 0.8, 1]
           }
print(animals)

################################################################################

# invalid dictionary - this should break

room_numbers = {
    ['Freddie', 'Jen']: 403,
    ['Ned', 'Keith']: 391,
    ['Kristin', 'Jazzmyne']: 411,
    ['Eugene', 'Zach']: 395
}
#The dictionary is using a mutable datatype for its keys

#FIXED below
room_numbers = {
    ('Freddie', 'Jen'): 403,
    ('Ned', 'Keith'): 391,
    ('Kristin', 'Jazzmyne'): 411,
    ('Eugene', 'Zach'): 395
}
print(room_numbers)

################################################################################

elements = {'hydrogen': {'number': 1,
                         'weight': 1.00794,
                         'symbol': 'H'},
              'helium': {'number': 2,
                         'weight': 4.002602,
                         'symbol': 'He'}}
print(elements['helium'])
print(elements.get('unobtainium', 'There is no such element You FILTHY PEASANT'))
#ALSO
print(elements['helium']['weight'])
oxygen = {"number": 8,"weight": 15.999,"symbol": "O"}
elements['oxygen'] = oxygen
print('elements = ', elements)

#Dodawanie rekordów:

elements['hydrogen']['is_noble_gas'] = False
elements['helium']['is_noble_gas'] = True

print(elements["hydrogen"]["is_noble_gas"])
print(elements["helium"]["is_noble_gas"])

print(elements)

################################################################################

verse = "if you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise"
print(verse, '\n')

# split verse into list of words
verse_list =  verse.split()
print(verse_list, '\n')

# convert list to a data structure that stores unique elements
verse_set = set(verse_list)
print(verse_set, '\n')

# print the number of unique words
num_unique = len(verse_set)
print(num_unique, '\n')

################################################################################

verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}
print(verse_dict, '\n')

# find number of unique keys in the dictionary
num_keys = len(verse_dict)
print(num_keys)

# find whether 'breathe' is a key in the dictionary
contains_breathe = 'breathe' in verse_dict
print(contains_breathe)

# create and sort a list of the dictionary's keys
sorted_keys = list(verse_dict.keys())

# get the first element in the sorted list of keys

sorted_keys.sort()
print(sorted_keys[0])

# find the element with the highest value in the list of keys
print(max(sorted_keys)) 

#OR

verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}
print(verse_dict, '\n')

# find number of unique keys in the dictionary
num_keys = len(verse_dict)
print(num_keys)

# find whether 'breathe' is a key in the dictionary
contains_breathe = "breathe" in verse_dict
print(contains_breathe)

# create and sort a list of the dictionary's keys
sorted_keys = sorted(verse_dict.keys())

# get the first element in the sorted list of keys
print(sorted_keys[0])

# find the element with the highest value in the list of keys
print(sorted_keys[-1]) 

################################################################################

n = 15
if n % 2 == 0:
    print("Number " + str(n) + " is even.")
else:
    print("Number " + str(n) + " is odd.")
print(n)

################################################################################

season = "summer"

if season == "spirng":
        print("Plant the garden!")
elif season == "summer":
        print("Water the garden!")
elif season == "fall":
        print("Harvest the garden!")
elif season == "winter":
        print("Stay indoors!")
else:
        print("unrecognized season")

################################################################################

#First Example - try changing the value of phone_balance
phone_balance = 10
bank_balance = 50

if phone_balance < 10:
    phone_balance += 10
    bank_balance -= 10

print(phone_balance)
print(bank_balance)

#Second Example - try changing the value of number

number = 145
if number % 2 == 0:
    print("Number " + str(number) + " is even.")
else:
    print("Number " + str(number) + " is odd.")

#Third Example - try to change the value of age
age = 35

# Here are the age limits for bus fares
free_up_to_age = 4
child_up_to_age = 18
senior_from_age = 65

# These lines determine the bus fare prices
concession_ticket = 1.25
adult_ticket = 2.50

# Here is the logic for bus fare prices
if age <= free_up_to_age:
    ticket_price = 0
elif age <= child_up_to_age:
    ticket_price = concession_ticket
elif age >= senior_from_age:
    ticket_price = concession_ticket
else:
    ticket_price = adult_ticket

message = "Somebody who is {} years old will pay ${} to ride the bus.".format(age, ticket_price)
print(message)

################################################################################

#Points	    Prize
#1 - 50	    wooden rabbit
#51 - 150	no prize
#151 - 180	wafer-thin mint
#181 - 200	penguin
#All of the lower and upper bounds here are inclusive, and points can only take on 
#positive integer values up to 200.
#In your if statement, assign the result variable to a string holding
# he appropriate message based on the value of points. If they've won a prize, 
#the message should state "Congratulations! You won a [prize name]!" 
#with the prize name. If there's no prize, the message should state 
#"Oh dear, no prize this time."
#Note: Feel free to test run your code with other inputs, but when you submit 
#your answer, only use the original input of points = 174. 
#You can hide your other inputs by commenting them out.

points = 174

if points <= 50:
    result = "Congratulations! You won a wooden rabbit!"
elif points <= 150:
    result = "Oh dear, no prize this time."
elif points <= 180:
    result = "Congratulations! You won a wafer-thin mint!"
else:
    result = "Congratulations! You won a penguin!"

print(result)

################################################################################

# '''
# You decide you want to play a game where you are hiding 
# a number from someone.  Store this number in a variable 
# called 'answer'.  Another user provides a number called
# 'guess'.  By comparing guess to answer, you inform the user
# if their guess is too high or too low.

# Fill in the conditionals below to inform the user about how
# their guess compares to the answer.
# '''
answer = 790355522 #provide answer
guess = 790355522

if guess < answer: #provide conditional
    result = "Oops!  Your guess was too low."
elif guess > answer: #provide conditional
    result = "Oops!  Your guess was too high."
elif guess == answer: #provide conditional
    result = "Nice!  Your guess matched the answer!"

print(result)

################################################################################

# '''
# Depending on where an individual is from we need to tax them 
# appropriately.  The states of CA, MN, and 
# NY have taxes of 7.5%, 9.5%, and 8.9% respectively.
# Use this information to take the amount of a purchase and 
# the corresponding state to assure that they are taxed by the right
# amount.
# '''
state = "NY" #Either CA, MN, or NY
purchase_amount = 200000 #amount of purchase

if state == "CA": #provide conditional for checking state is CA
    tax_amount = .075
    total_cost = purchase_amount*(1+tax_amount)
    result = "Since you're from {}, your total cost is {}.".format(state, total_cost)

elif state == "MN": #provide conditional for checking state is MN
    tax_amount = .095
    total_cost = purchase_amount*(1+tax_amount)
    result = "Since you're from {}, your total cost is {}.".format(state, total_cost)

elif state == "NY": #provide conditional for checking state is NY
    tax_amount = .089
    total_cost = purchase_amount*(1+tax_amount)
    result = "Since you're from {}, your total cost is {}.".format(state, total_cost)


print(result)

################################################################################

weight = 55
height = 164
if 18.5 <= weight / height**2 < 25:
    print("BMI is considered 'normal'")

################################################################################

errors = 0
if errors:
    print("You have {} errors to fix!".format(errors))
else:
    print("No errors to fix!")

################################################################################

points = 174  # use this as input for your submission

# establish the default prize value to None
prize = None

# use the points value to assign prizes to the correct prize names

if points <= 50:
    prize = "Wooden rabbit"
elif 151 <= points <= 180:
    prize = "Wafer-thin mint"
elif points >= 181:
    prize = "Penguin"

# use the truth value of prize to assign result to the correct prize

if prize:
    result = "Congratulations! You won a {}!".format(prize)
else:
    result = "Oh dear, no prize this time."


print(result)

#OR

points = 174  # use this input when submitting your answer

# set prize to default value of None
prize = None

# use the value of points to assign prize to the correct prize name
if points <= 50:
    prize = "wooden rabbit"
elif 151 <= points <= 180:
    prize = "wafer-thin mint"
elif points >= 181:
    prize = "penguin"

# use the truth value of prize to assign result to the correct message
if prize:
    result = "Congratulations! You won a {}!".format(prize)
else:
    result = "Oh dear, no prize this time."

print(result)

################################################################################

cities = ['new york city', 'moutain view', 'chicago', 'los angeles']
for city in cities:
    print(city.title())

################################################################################

cities = ['new york city', 'moutain view', 'chicago', 'los angeles']
capitalized_cities = []
for city in cities:
    capitalized_cities.append(city.title())

################################################################################

print(list(range(4)))
print(list(range(2, 6)))
print(list(range(1, 10, 2)))

################################################################################

for number in range(4):
    print(number)

################################################################################

cities = ['new york city', 'moutain view', 'chicago', 'los angeles']

for index in range(len(cities)):
    cities[index] = cities[index].title()
    print(cities)

################################################################################

for i in range(3):
    print("Hello!")

################################################################################

sentence = ["the", "quick", "brown", "fox", "jumped", "over", "the", "lazy", "dog"]

# Write a for loop to print out each word in the sentence list, one word per line

for word in sentence:
    print(word)


################################################################################

# Write a for loop using range() to print out multiples of 5 up to 30 inclusive
for i in range(5, 31, 5):
    print(i)

################################################################################

# Write a for loop that iterates over the names list to create a usernames list. 
# To create a username for each name, make everything lowercase and replace spaces with underscores. 
# Running your for loop over the list:

names = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]
usernames = []

# write your for loop here

for name in names:
    name = name.replace(' ', '_')
    usernames.append(name.lower())

print(usernames)

################################################################################

# Write a for loop that uses range() to iterate over the positions in usernames to modify the list. 
# Like you did in the previous quiz, change each name to be lowercase and replace spaces with underscores. 
usernames = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]

# write your for loop here
for index in range(len(usernames)):
    usernames[index] = usernames[index].lower()
    usernames[index] = usernames[index].replace(' ', '_')


print(usernames)

################################################################################

#Write a for loop that iterates over a list of strings, tokens, and counts how many of them are XML tags. 
#XML is a data language similar to HTML. You can tell if a string is an XML tag if it begins with a left angle bracket "<" and ends with a right angle bracket ">". 
#Keep track of the number of tags using the variable count.

#You can assume that the list of strings will not contain empty strings.
tokens = ['<greeting>', 'Hello World!', '</greeting>']
count = 0
for token in tokens:
    if token[0] == '<' and token[-1] == '>':
        count += 1
    
# write your for loop here

print(count)

################################################################################

# Write some code, including a for loop, that iterates over a list of strings and creates a single string, html_str, which is an HTML list. 

items = ['first string', 'second string']
html_str = "<ul>\n"  # "\ n" is the character that marks the end of the line, it does
                     # the characters that are after it in html_str are on the next line

# write your code here
for item in items:
    html_str += "<li>{}</li>\n".format(item)
html_str += "</ul>"

print(html_str)


################################################################################

colors = ['Red', 'Blue', 'Green', 'Purple']
lower_colors = [ ]

for color in colors:
    lower_colors.append(color.lower())

print(lower_colors)

################################################################################

# BUILDING DICTIONARIES
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @@@@@@@@@@@@@@@@@@@@@ Method 1: Using a for loop to create a set of counters @@@@@@@@@@@@@@@@@@@@@
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

book_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']
# ** Step 1 ** Create an empty dictionary.
word_counter = {}
# ** Step 2** Iterate through each element in the list. 
# If an element is already included in the dictionary, add 1 to its value. 
# If not, add the element to the dictionary and set its value to 1.

for word in book_title:
    if word not in word_counter:
        word_counter[word] = 1
    else:
        word_counter[word] += 1
    
    #####  What's happening here?
  #  - The `for` loop iterates through each element in the list. For the first iteration, `word` takes the value 'great'.
  #  - Next, the if statement checks if `word` is in the `word_counter` dictionary.
  #  - Since it doesn't yet, the statement  `word_counter[word] = 1` adds *great* as a key to the dictionary with a value of 1.
  #  - Then, it leaves the if else statement and moves on to the next iteration of the for loop. `word` now takes the value *expectations* and repeats the process.
  #  - When the if condition is not met, it is because that`word` already exists in the `word_counter` dictionary, and the statement `word_counter[word] = word_counter[word] + 1` increases the count of that word by 1.
  #  - Once the `for` loop finishes iterating through the list, the `for` loop is complete. 
    
  #  We can see the output by printing out the dictionary. Printing `word_counter` results in the following output.
   
print(word_counter)

# BUILDING DICTIONARIES
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @@@@@@@@@@@@@@@@@@@@@ Method 2: Using the get method @@@@@@@@@@@@@@@@@@@@@
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
book_title =  ['great', 'expectations','the', 'adventures', 'of', 'sherlock','holmes','the','great','gasby','hamlet','adventures','of','huckleberry','fin']

##### ** Step 1 **  Create an empty dictionary.,
word_counter = {}

#### **  Step 2 ** Iterate through each element, get() its value in the dictionary, and add 1.
# Recall that the dictionary get method is another way to retrieve the value of a key in a dictionary. 
# Except unlike indexing, this will return a default value if the key is not found. 
# If unspecified, this default value is set to None. 
# We can use get with a default value of 0 to simplify the code from the first method above.

for word in book_title:
    word_counter[word] = word_counter.get(word, 0) + 1

#####  What's happening here?
# - The `for` loop iterates through the list as we saw earlier. The `for` loop feeds 'great' to the next statement in the body of the `for` loop.
# -   In this line: ` word_counter[word] = word_counter.get(word,0) + 1`, since the key *'great'* doesn't yet exist in the dictionary, `get()` will return the value 0 and `word_counter[word]` will be set to 1.
#- Once it encounters a word that already exists in `word_counter` (e.g. the second appearance of *'the'*),  the  value for that key is incremented by 1. On the second appearance of 'the', the key's value would add 1 again, resulting in 2.
# - Once the `for` loop finishes iterating through the list, the `for` loop is complete.

# Printing `word_counter` shows us we get the same result as we did in method 1.

print(word_counter)
################################################################################

cast = {
       "Jerry Seinfeld": "Jerry Seinfeld",
       "Julia Louis-Dreyfus": "Elaine Benes",
       "Jason Alexander": "George Coztanza",
       "Michael Richards": "Cosmo Kramer"
       }
for key in cast:
    print(key)
for key, value in cast.items():
    print("Actor: {}        Role: {}".format(key, value))

################################################################################


# You would like to count the number of fruits in your basket. 
# In order to do this, you have the following dictionary and list of
# fruits.  Use the dictionary and list to count the total number
# of fruits, but you do not want to count the other items in your basket.

result = 0
basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

#Iterate through the dictionary
for key, values in basket_items.items():
    if key not in fruits:
        result += 0
    else:
        result += values
#if the key is in the list of fruits, add the value (number of fruits) to result


print(result)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ OR @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

result = 0
basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

for object, count in basket_items.items():
   if object in fruits:
       result += count

print("There are {} fruits in the basket.".format(result))

################################################################################

# If your solution is robust, you should be able to use it with
# any dictionary of items to count the number of fruits in the basket. 
# Try the loop for each of the dictionaries below to make sure it always works.

#Example 1

result = 0
basket_items = {'pears': 5, 'grapes': 19, 'kites': 3, 'sandwiches': 8, 'bananas': 4}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

# Your previous solution here
for key, values in basket_items.items():
    if key not in fruits:
        result += 0
    else:
        result += values

print(result)

#Example 2

result = 0
basket_items = {'peaches': 5, 'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

# Your previous solution here
for key, values in basket_items.items():
    if key not in fruits:
        result += 0
    else:
        result += values

print(result)


#Example 3

result = 0
basket_items = {'lettuce': 2, 'kites': 3, 'sandwiches': 8, 'pears': 4, 'bears': 10}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

# Your previous solution here
for key, values in basket_items.items():
    if key not in fruits:
        result += 0
    else:
        result += values
print(result)

################################################################################

# You would like to count the number of fruits in your basket. 
# In order to do this, you have the following dictionary and list of
# fruits.  Use the dictionary and list to count the total number
# of fruits and not_fruits.

fruit_count, not_fruit_count = 0, 0
basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

#Iterate through the dictionary
for key, values in basket_items.items():
    if key not in fruits:
        not_fruit_count += values
    else:
        fruit_count += values
#if the key is in the list of fruits, add to fruit_count.

#if the key is not in the list, then add to the not_fruit_count


print(fruit_count, not_fruit_count)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ OR @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

fruit_count, not_fruit_count = 0, 0
basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

#Iterate through the dictionary
for object, count in basket_items.items():
    if object in fruits:
       fruit_count += count
    else:
        not_fruit_count += count

print("The number of fruits is {}.  There are {} objects that are not fruits.".format(fruit_count, not_fruit_count))

################################################################################

card_deck = [4, 11, 8, 5, 13, 2, 8, 10]
hand = []

while sum(hand) <= 17:
    hand.append(card_deck.pop())
    print(sum(hand))

    print(hand)
    
################################################################################

# Napisać pętlę, która podnosi kolejne cyfry do kwadratu kończąc na zadanej cyfrze / liczbie
n = int(input())
for i in range(0, n, 1):
        print(i ** 2)

################################################################################

# Find the factorial of a number using a while loop.
# A factorial of a whole number is that number multiplied by every whole number between itself and 1. 
# For example, 6 factorial (written "6!") equals 6 x 5 x 4 x 3 x 2 x 1 = 720. So 6! = 720.
# We can write a while loop to take any given number and figure out what its factorial is.
# Example: If number is 6, your code should compute and print the product, 720.


# number to find the factorial of
number = 6   

# start with our product equal to one
product = 1

# track the current number being multiplied
current = 1

# write your while loop here
while current <= number:
    product *= current
    current += 1
    # multiply the product so far by the current number
    
    
    # increment current with each iteration until it reaches number



# print the factorial of number
print(product)

################################################################################

# number to find the factorial of
number = 6   

# start with our product equal to one
product = 1

# write your for loop here

for num in range(2, number + 1):
    product *= i

# print the factorial of number
print(product)
